use serde::{Deserialize, Serialize};
use std::fmt;

#[derive(Debug, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub enum LevelOneOptionsField {
    Symbol,
    Description,
    BidPrice,
    AskPrice,
    LastPrice,
    HighPrice,
    LowPrice,
    ClosePrice,
    TotalVolume,
    OpenInterest,
    Volatility,
    MoneyIntrinsicValue,
    ExpirationYear,
    Multiplier,
    Digits,
    OpenPrice,
    BidSize,
    AskSize,
    LastSize,
    NetChange,
    StrikePrice,
    ContractType,
    Underlying,
    ExpirationMonth,
    Deliverables,
    TimeValue,
    ExpirationDay,
    DaysToExpiration,
    Delta,
    Gamma,
    Theta,
    Vega,
    Rho,
    SecurityStatus,
    TheoreticalOptionValue,
    UnderlyingPrice,
    UvExpirationType,
    MarkPrice,
    QuoteTimeInLong,
    TradeTimeInLong,
    Exchange,
    ExchangeName,
    LastTradingDay,
    SettlementType,
    NetPercentChange,
    MarkPriceNetChange,
    MarkPricePercentChange,
    ImpliedYield,
    IsPennyPilot,
    OptionRoot,
    FiftyTwoWeekHigh,
    FiftyTwoWeekLow,
    IndicativeAskPrice,
    IndicativeBidPrice,
    IndicativeQuoteTime,
    ExerciseType,
}

impl fmt::Display for LevelOneOptionsField {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            LevelOneOptionsField::Symbol => write!(f, "0"),
            LevelOneOptionsField::Description => write!(f, "1"),
            LevelOneOptionsField::BidPrice => write!(f, "2"),
            LevelOneOptionsField::AskPrice => write!(f, "3"),
            LevelOneOptionsField::LastPrice => write!(f, "4"),
            LevelOneOptionsField::HighPrice => write!(f, "5"),
            LevelOneOptionsField::LowPrice => write!(f, "6"),
            LevelOneOptionsField::ClosePrice => write!(f, "7"),
            LevelOneOptionsField::TotalVolume => write!(f, "8"),
            LevelOneOptionsField::OpenInterest => write!(f, "9"),
            LevelOneOptionsField::Volatility => write!(f, "10"),
            LevelOneOptionsField::MoneyIntrinsicValue => write!(f, "11"),
            LevelOneOptionsField::ExpirationYear => write!(f, "12"),
            LevelOneOptionsField::Multiplier => write!(f, "13"),
            LevelOneOptionsField::Digits => write!(f, "14"),
            LevelOneOptionsField::OpenPrice => write!(f, "15"),
            LevelOneOptionsField::BidSize => write!(f, "16"),
            LevelOneOptionsField::AskSize => write!(f, "17"),
            LevelOneOptionsField::LastSize => write!(f, "18"),
            LevelOneOptionsField::NetChange => write!(f, "19"),
            LevelOneOptionsField::StrikePrice => write!(f, "20"),
            LevelOneOptionsField::ContractType => write!(f, "21"),
            LevelOneOptionsField::Underlying => write!(f, "22"),
            LevelOneOptionsField::ExpirationMonth => write!(f, "23"),
            LevelOneOptionsField::Deliverables => write!(f, "24"),
            LevelOneOptionsField::TimeValue => write!(f, "25"),
            LevelOneOptionsField::ExpirationDay => write!(f, "26"),
            LevelOneOptionsField::DaysToExpiration => write!(f, "27"),
            LevelOneOptionsField::Delta => write!(f, "28"),
            LevelOneOptionsField::Gamma => write!(f, "29"),
            LevelOneOptionsField::Theta => write!(f, "30"),
            LevelOneOptionsField::Vega => write!(f, "31"),
            LevelOneOptionsField::Rho => write!(f, "32"),
            LevelOneOptionsField::SecurityStatus => write!(f, "33"),
            LevelOneOptionsField::TheoreticalOptionValue => write!(f, "34"),
            LevelOneOptionsField::UnderlyingPrice => write!(f, "35"),
            LevelOneOptionsField::UvExpirationType => write!(f, "36"),
            LevelOneOptionsField::MarkPrice => write!(f, "37"),
            LevelOneOptionsField::QuoteTimeInLong => write!(f, "38"),
            LevelOneOptionsField::TradeTimeInLong => write!(f, "39"),
            LevelOneOptionsField::Exchange => write!(f, "40"),
            LevelOneOptionsField::ExchangeName => write!(f, "41"),
            LevelOneOptionsField::LastTradingDay => write!(f, "42"),
            LevelOneOptionsField::SettlementType => write!(f, "43"),
            LevelOneOptionsField::NetPercentChange => write!(f, "44"),
            LevelOneOptionsField::MarkPriceNetChange => write!(f, "45"),
            LevelOneOptionsField::MarkPricePercentChange => write!(f, "46"),
            LevelOneOptionsField::ImpliedYield => write!(f, "47"),
            LevelOneOptionsField::IsPennyPilot => write!(f, "48"),
            LevelOneOptionsField::OptionRoot => write!(f, "49"),
            LevelOneOptionsField::FiftyTwoWeekHigh => write!(f, "50"),
            LevelOneOptionsField::FiftyTwoWeekLow => write!(f, "51"),
            LevelOneOptionsField::IndicativeAskPrice => write!(f, "52"),
            LevelOneOptionsField::IndicativeBidPrice => write!(f, "53"),
            LevelOneOptionsField::IndicativeQuoteTime => write!(f, "54"),
            LevelOneOptionsField::ExerciseType => write!(f, "55"),
        }
    }
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub enum LevelOneEquitiesField {
    Symbol,
    BidPrice,
    AskPrice,
    LastPrice,
    BidSize,
    AskSize,
    AskId,
    BidId,
    TotalVolume,
    LastSize,
    HighPrice,
    LowPrice,
    ClosePrice,
    ExchangeId,
    Marginable,
    Description,
    LastId,
    OpenPrice,
    NetChange,
    FiftyTwoWeekHigh,
    FiftyTwoWeekLow,
    PeRatio,
    AnnualDividendAmount,
    DividendYield,
    Nav,
    ExchangeName,
    DueDate, // Changed from DividendDate to DueDate to avoid conflict with field name
    RegularMarketQuote,
    RegularMarketTrade,
    RegularMarketLastPrice,
    RegularMarketLastSize,
    RegularMarketNetChange,
    SecurityStatus,
    MarkPrice,
    QuoteTimeInLong,
    TradeTimeInLong,
    RegularMarketTradeTimeInLong,
    BidTime,
    AskTime,
    AskMicId,
    BidMicId,
    LastMicId,
    NetPercentChange,
    RegularMarketPercentChange,
    MarkPriceNetChange,
    MarkPricePercentChange,
    HardToBorrowQuantity,
    HardToBorrowRate,
    HardToBorrow,
    Shortable,
    PostMarketNetChange,
    PostMarketPercentChange,
}

impl fmt::Display for LevelOneEquitiesField {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            LevelOneEquitiesField::Symbol => write!(f, "0"),
            LevelOneEquitiesField::BidPrice => write!(f, "1"),
            LevelOneEquitiesField::AskPrice => write!(f, "2"),
            LevelOneEquitiesField::LastPrice => write!(f, "3"),
            LevelOneEquitiesField::BidSize => write!(f, "4"),
            LevelOneEquitiesField::AskSize => write!(f, "5"),
            LevelOneEquitiesField::AskId => write!(f, "6"),
            LevelOneEquitiesField::BidId => write!(f, "7"),
            LevelOneEquitiesField::TotalVolume => write!(f, "8"),
            LevelOneEquitiesField::LastSize => write!(f, "9"),
            LevelOneEquitiesField::HighPrice => write!(f, "10"),
            LevelOneEquitiesField::LowPrice => write!(f, "11"),
            LevelOneEquitiesField::ClosePrice => write!(f, "12"),
            LevelOneEquitiesField::ExchangeId => write!(f, "13"),
            LevelOneEquitiesField::Marginable => write!(f, "14"),
            LevelOneEquitiesField::Description => write!(f, "15"),
            LevelOneEquitiesField::LastId => write!(f, "16"),
            LevelOneEquitiesField::OpenPrice => write!(f, "17"),
            LevelOneEquitiesField::NetChange => write!(f, "18"),
            LevelOneEquitiesField::FiftyTwoWeekHigh => write!(f, "19"),
            LevelOneEquitiesField::FiftyTwoWeekLow => write!(f, "20"),
            LevelOneEquitiesField::PeRatio => write!(f, "21"),
            LevelOneEquitiesField::AnnualDividendAmount => write!(f, "22"),
            LevelOneEquitiesField::DividendYield => write!(f, "23"),
            LevelOneEquitiesField::Nav => write!(f, "24"),
            LevelOneEquitiesField::ExchangeName => write!(f, "25"),
            LevelOneEquitiesField::DueDate => write!(f, "26"),
            LevelOneEquitiesField::RegularMarketQuote => write!(f, "27"),
            LevelOneEquitiesField::RegularMarketTrade => write!(f, "28"),
            LevelOneEquitiesField::RegularMarketLastPrice => write!(f, "29"),
            LevelOneEquitiesField::RegularMarketLastSize => write!(f, "30"),
            LevelOneEquitiesField::RegularMarketNetChange => write!(f, "31"),
            LevelOneEquitiesField::SecurityStatus => write!(f, "32"),
            LevelOneEquitiesField::MarkPrice => write!(f, "33"),
            LevelOneEquitiesField::QuoteTimeInLong => write!(f, "34"),
            LevelOneEquitiesField::TradeTimeInLong => write!(f, "35"),
            LevelOneEquitiesField::RegularMarketTradeTimeInLong => write!(f, "36"),
            LevelOneEquitiesField::BidTime => write!(f, "37"),
            LevelOneEquitiesField::AskTime => write!(f, "38"),
            LevelOneEquitiesField::AskMicId => write!(f, "39"),
            LevelOneEquitiesField::BidMicId => write!(f, "40"),
            LevelOneEquitiesField::LastMicId => write!(f, "41"),
            LevelOneEquitiesField::NetPercentChange => write!(f, "42"),
            LevelOneEquitiesField::RegularMarketPercentChange => write!(f, "43"),
            LevelOneEquitiesField::MarkPriceNetChange => write!(f, "44"),
            LevelOneEquitiesField::MarkPricePercentChange => write!(f, "45"),
            LevelOneEquitiesField::HardToBorrowQuantity => write!(f, "46"),
            LevelOneEquitiesField::HardToBorrowRate => write!(f, "47"),
            LevelOneEquitiesField::HardToBorrow => write!(f, "48"),
            LevelOneEquitiesField::Shortable => write!(f, "49"),
            LevelOneEquitiesField::PostMarketNetChange => write!(f, "50"),
            LevelOneEquitiesField::PostMarketPercentChange => write!(f, "51"),
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LevelOneOptionsResponseFields {
    symbol: String,
    description: String,
    bid_price: f64,
    ask_price: f64,
    last_price: f64,
    high_price: f64,
    low_price: f64,
    close_price: f64,
    total_volume: i64,
    open_interest: i64,
    volatility: f64,
    money_intrinsic_value: f64,
    expiration_year: i64,
    multiplier: f64,
    digits: i64,
    open_price: f64,
    bid_size: i64,
    ask_size: i64,
    last_size: i64,
    net_change: f64,
    strike_price: f64,
    contract_type: char,
    underlying: String,
    expiration_month: i64,
    deliverables: String,
    time_value: f64,
    expiration_day: i64,
    days_to_expiration: i64,
    delta: f64,
    gamma: f64,
    theta: f64,
    vega: f64,
    rho: f64,
    security_status: String,
    theoretical_option_value: f64,
    underlying_price: f64,
    uv_expiration_type: char,
    mark_price: f64,
    quote_time_in_long: i64,
    trade_time_in_long: i64,
    exchange: char,
    exchange_name: String,
    last_trading_day: i64,
    settlement_type: char,
    net_percent_change: f64,
    mark_price_net_change: f64,
    mark_price_percent_change: f64,
    implied_yield: f64,
    is_penny_pilot: bool,
    option_root: String,
    fifty_two_week_high: f64,
    fifty_two_week_low: f64,
    indicative_ask_price: f64,
    indicative_bid_price: f64,
    indicative_quote_time: i64,
    exercise_type: char,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct LevelOneEquitiesFields {
    symbol: String,
    bid_price: f64,
    ask_price: f64,
    last_price: f64,
    bid_size: i64,
    ask_size: i64,
    ask_id: char,
    bid_id: char,
    total_volume: i64,
    last_size: i64,
    high_price: f64,
    low_price: f64,
    close_price: f64,
    exchange_id: char,
    marginable: bool,
    description: String,
    last_id: char,
    open_price: f64,
    net_change: f64,
    fifty_two_week_high: f64,
    fifty_two_week_low: f64,
    pe_ratio: f64,
    annual_dividend_amount: f64,
    dividend_yield: f64,
    nav: f64,
    exchange_name: String,
    dividend_date: String,
    regular_market_quote: bool,
    regular_market_trade: bool,
    regular_market_last_price: f64,
    regular_market_last_size: i64,
    regular_market_net_change: f64,
    security_status: String,
    mark_price: f64,
    quote_time_in_long: i64,
    trade_time_in_long: i64,
    regular_market_trade_time_in_long: i64,
    bid_time: i64,
    ask_time: i64,
    ask_mic_id: String,
    bid_mic_id: String,
    last_mic_id: String,
    net_percent_change: f64,
    regular_market_percent_change: f64,
    mark_price_net_change: f64,
    mark_price_percent_change: f64,
    hard_to_borrow_quantity: i64,
    hard_to_borrow_rate: f64,
    hard_to_borrow: i64,
    shortable: i64,
    post_market_net_change: f64,
    post_market_percent_change: f64,
}
